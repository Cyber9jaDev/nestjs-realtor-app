generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Image {
  id                      Int       @id         @default(autoincrement())
  url                     String
  created_at              DateTime  @default(now())
  updated                 DateTime  @updatedAt

  home                    Home      @relation(fields: [home_id], references: [id])             
  home_id                 Int 
}

model User {
  id                    Int         @id          @default(autoincrement())
  name                  String
  phone                 String  
  email                 String      @unique
  password              String
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
  user_type             UserType

  homes                 Home[]

  buyer_messages        Message[]   @relation("buyer_messages")

  realtor_messages      Message[]   @relation("realtor_messages")      
}

model Home {
  id                      Int @id @default(autoincrement())
  address                 String
  number_of_bedrooms      Int  
  number_of_bathrooms     Float
  city                    String
  listed_date             DateTime @default(now()) 
  price                   Float
  land_size               Float
  propertyType            PropertyType    
  created_at              DateTime @default(now())
  updated                 DateTime @updatedAt

  images                  Image[]

  realtor                 User @relation(fields: [realtor_id], references: [id])
  realtor_id              Int

  messages                Message[]
}

model Message {
  id                    Int @id  @default(autoincrement())
  message               String

  home                  Home @relation(fields: [home_id], references: [id])
  home_id               Int

  realtor               User  @relation("buyer_messages", fields: [realtor_id], references: [id])
  realtor_id            Int

  buyer                 User  @relation("realtor_messages", fields: [buyer_id], references: [id])
  buyer_id              Int
}

enum PropertyType {
  RESIDENTIAL
  CONDO
}

enum UserType {
  BUYER
  REALTOR
  ADMIN
}

import { Test, TestingModule } from '@nestjs/testing';
import { HomeController } from './home.controller';
import { HomeService } from './home.service';
import { DatabaseService } from 'src/database/database.service';

describe('HomeController', () => {
  let controller: HomeController;
  let homeService: HomeService;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      controllers: [HomeController],
      providers: [
        DatabaseService,
        {
          provide: HomeService,
          useValue: {
            getHomes: jest.fn().mockReturnValue([]),
          },
        },
      ],
    }).compile();

    controller = module.get<HomeController>(HomeController);
    homeService = module.get<HomeService>(HomeService);
  });

  describe('getHomes', () => {
    it('should construct filter object correctly', async () => {
      const mockGetHomes = jest.fn().mockReturnValue([]);
      jest.spyOn(homeService, 'getHomes').mockImplementation(mockGetHomes);
      await controller.getHomes('Ibadan', '1500000');

      expect(mockGetHomes).toHaveBeenCalledWith({
        city: 'Ibadan',   //city
        price: {
          gte: 1500000   //minPrice
        }
      });
    });
  });
});
